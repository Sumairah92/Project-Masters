# This viminfo file was generated by Vim 7.4.
# You may edit it if you're careful!

# Value of 'encoding' when this file was written
*encoding=utf-8


# hlsearch on (H) or off (h):
~h
# Last Search Pattern:
~Msle0~/\<pathBW\>

# Command Line History (newest to oldest):
:wq!
:152
:149
:`149
:130
:250
:145
:150
:140
:259
:q!
:200
:190
:195
:196
:278
:222
:254
:100
:260
:263
:256
:230
:236
:246
:129
:247
:240
:237
:232
:235
:90
:70
:50
:238
:0
:228
:215
:22
:217
:224
:221
:218
:213
:212
:214
:180
:170
:185
:173

# Search String History (newest to oldest):
? \<pathBW\>
? \<result\>
? \<print\>
?/link-0
?//link-0

# Expression History (newest to oldest):

# Input Line History (newest to oldest):

# Input Line History (newest to oldest):

# Registers:
""1	CHAR	0
	
	#----------Query for stats at t2----------#
	
		for nodes in Network.nodes():
	        	if Network.node[nodes]['DPID'] is not None:
	                	for i,interface in enumerate(Network.node[nodes]['interfaces']):
	                        	P =  Network.node[nodes]['interfaces'][i]['Port']
					L = Network.node[nodes]['interfaces'][i]['link']
	                        	if (P <> 'local') and (L in interswitchLinks):
	                                        command = "curl http://%s/wm/statistics/bandwidth/'%s'/'%s'/json" % (controllerIp, Network.node[nodes]['DPID'],P)
	                                        result=os.popen(command).read()
	                                        parsedResult = json.loads(result)
	                                        for result in parsedResult:
							if (result['port'] == P):
								Bandwidth_t2[result['dpid']+result['port']] = int(result['bits-per-second-tx'])+int(result['bits-per-second-rx'])
	
	#----------Calculate Bandwidth Difference----------#
	
		for nodes in Network.nodes():
	                if Network.node[nodes]['DPID'] is not None:
	                        for i,interface in enumerate(Network.node[nodes]['interfaces']):
	                                P =  Network.node[nodes]['interfaces'][i]['Port']
					L = Network.node[nodes]['interfaces'][i]['link']
	                                if (P <> 'local') and (L in interswitchLinks):
	                                	BandwidthUsage[Network.node[nodes]['DPID']+P] = Bandwidth_t2[Network.node[nodes]['DPID']+P] - Bandwidth_t1[Network.node[nodes]['DPID']+P]
	
	#	print BandwidthUsage	
		
	
"2	CHAR	0
	for d in dpids:
		command = "curl -s http://%s/wm/core/switch/'%s'/flow/json" % (controllerIp,d)
		result=os.popen(command).read()
		parsedResult = json.loads(result)
		for nodes in Network.nodes():
	        	if Network.node[nodes]['DPID'] == d:
	                        for i,interface in enumerate(Network.node[nodes]['interfaces']):
	                                ip=Network.node[nodes]['interfaces'][i]['IP']
	                                for flows in parsedResult['flows']:
	                			if (flows['priority'] <>'2'):
	                        			hostIp=flows['match']['ipv4_src']
							if (hostIp[:-2] == ip[:-2]):
	                                			I = {'name:':nodes,
								      'host':hostIp,
								      'dipd': d}	
								switchHosts.append(I)
								break
		
"3	CHAR	0
	'''
	        for flows in parsedResult['flows']:
	                if (flows['priority'] <>'2'):
	                        hostIp=flows['match']['ipv4_src']
	                        print "HostIP checking %s",hostIp
	                        for nodes in Network.nodes():
	                                if Network.node[nodes]['DPID'] == d:
	                                        print "node matched %s",nodes
	                                        for i,interface in enumerate(Network.node[nodes]['interfaces']):
	                                                print interface
	                                                ip=Network.node[nodes]['interfaces'][i]['IP']
	                                                if (hostIp[:-2] == ip[:-2]):
	                                                        print "match found %s",ip
	                                                        break
	'''	
"4	CHAR	0
	'''
		for flows in parsedResult['flows']:
			if (flows['priority'] <>'2'):
				hostIp=flows['match']['ipv4_src']
				print "HostIP checking %s",hostIp
				for nodes in Network.nodes():
					if Network.node[nodes]['DPID'] == d:
						print "node matched %s",nodes
						for i,interface in enumerate(Network.node[nodes]['interfaces']):
							print interface
							ip=Network.node[nodes]['interfaces'][i]['IP']
							if (hostIp[:-2] == ip[:-2]):
								print "match found %s",ip
								break
	'''
"5	CHAR	0
	#Declare static flowpusher class
	
	class StaticFlowPusher(object):
	 
	    def __init__(self, server):
	        self.server = server
	 
	    def get(self, data):
	        ret = self.rest_call({}, 'GET')
	        return json.loads(ret[2])
	 
	    def set(self, data):
	        ret = self.rest_call(data, 'POST')
	        return ret[0] == 200
	 
	    def remove(self, objtype, data):
	        ret = self.rest_call(data, 'DELETE')
	        return ret[0] == 200
	 
	    def rest_call(self, data, action):
	        path = '/wm/staticflowpusher/json'
	        headers = {
	            'Content-type': 'application/json',
	            'Accept': 'application/json',
	            }
	        body = json.dumps(data)
	        conn = httplib.HTTPConnection(self.server, 8080)
	        conn.request(action, path, body, headers)
	        response = conn.getresponse()
	        ret = (response.status, response.reason, response.read())
	        print ret
	        conn.close()
	        return ret
	
	pusher = StaticFlowPusher('128.163.232.72')
	
	
"6	CHAR	0
							'''
							
							flow = {
	                                                        "switch":dpid,
	                                                        "name":"flow_" + str(count),
	                                                        "cookie":"0",
	                                                        "priority":"3",
	                                                        "eth_type":"0x0x800", 
	                                                        "ipv4_src":sourceIP,
	                                                        "ipv4_dst":destIP,
	                                                        "active":"true",
	                                                        "actions":"output="+port
	                                                        }'''
		
"7	CHAR	0
			print "node:%s",p
	
"8	CHAR	0
		print "node interface:%s",interface
	
"9	CHAR	0
	for path in nx.all_simple_paths(Network, source='h2', target='h3'):
		if path not in nx.shortest_path(Network, source='h2', target='h3')
	    		sendPath = path
	 
"-	CHAR	0
	n

# File marks:
'0  156  1  ~/myapp.py
'1  154  11  ~/myapp.py
'2  153  17  ~/myapp.py
'3  151  2  ~/myapp.py
'4  152  11  ~/myapp.py
'5  155  25  ~/myapp.py
'6  139  92  ~/myapp.py
'7  136  56  ~/myapp.py
'8  247  12  ~/myapp.py
'9  146  0  ~/myapp.py

# Jumplist (newest first):
-'  156  1  ~/myapp.py
-'  1  0  ~/myapp.py
-'  154  11  ~/myapp.py
-'  153  17  ~/myapp.py
-'  151  2  ~/myapp.py
-'  152  6  ~/myapp.py
-'  155  25  ~/myapp.py
-'  139  92  ~/myapp.py
-'  136  56  ~/myapp.py
-'  247  12  ~/myapp.py
-'  146  0  ~/myapp.py
-'  145  47  ~/myapp.py
-'  129  0  ~/myapp.py
-'  248  40  ~/myapp.py
-'  143  34  ~/myapp.py
-'  140  96  ~/myapp.py
-'  144  26  ~/myapp.py
-'  157  22  ~/myapp.py
-'  142  14  ~/myapp.py
-'  205  39  ~/myapp.py
-'  270  1  ~/myapp.py
-'  98  15  ~/myapp.py
-'  2  0  ~/myapp.py
-'  213  2  ~/myapp.py
-'  246  0  ~/myapp.py
-'  131  7  ~/myapp.py
-'  238  2  ~/myapp.py
-'  215  63  ~/myapp.py
-'  218  22  ~/myapp.py
-'  216  13  ~/myapp.py
-'  275  2  ~/myapp.py
-'  225  0  ~/myapp.py
-'  273  0  ~/myapp.py
-'  130  0  ~/myapp.py
-'  12  15  ~/myapp.py
-'  340  7  ~/topology.xml
-'  1  0  ~/topology.xml
-'  249  18  ~/myapp.py
-'  231  0  ~/myapp.py
-'  115  0  ~/myapp.py
-'  210  0  ~/myapp.py
-'  274  0  ~/myapp.py
-'  1  0  ~/m
-'  177  0  ~/myapp.py
-'  200  21  ~/myapp.py
-'  175  22  ~/myapp.py
-'  193  24  ~/myapp.py
-'  173  25  ~/myapp.py
-'  272  58  ~/myapp.py
-'  267  24  ~/myapp.py
-'  266  164  ~/myapp.py
-'  207  0  ~/myapp.py
-'  262  61  ~/myapp.py
-'  252  24  ~/myapp.py
-'  261  50  ~/myapp.py
-'  263  9  ~/myapp.py
-'  549  7  ~/topology.xml
-'  823  7  ~/topology.xml
-'  259  25  ~/myapp.py
-'  126  40  ~/myapp.py
-'  120  65  ~/myapp.py
-'  260  61  ~/myapp.py
-'  257  80  ~/myapp.py
-'  125  65  ~/myapp.py
-'  191  0  ~/myapp.py
-'  7  8  ~/myapp.py
-'  202  86  ~/myapp.py
-'  222  0  ~/myapp.py
-'  184  52  ~/myapp.py
-'  201  42  ~/myapp.py
-'  198  63  ~/myapp.py
-'  196  21  ~/myapp.py
-'  192  10  ~/myapp.py
-'  188  37  ~/myapp.py
-'  189  21  ~/myapp.py
-'  199  15  ~/myapp.py
-'  179  71  ~/myapp.py
-'  185  12  ~/myapp.py
-'  176  34  ~/myapp.py
-'  174  54  ~/myapp.py
-'  181  53  ~/myapp.py
-'  161  58  ~/myapp.py
-'  180  33  ~/myapp.py
-'  190  24  ~/myapp.py
-'  212  50  ~/myapp.py
-'  251  20  ~/myapp.py
-'  26  34  ~/myapp.py
-'  22  3  ~/myapp.py
-'  22  0  ~/path.py
-'  1  0  ~/path.py
-'  226  7  ~/myapp.py
-'  241  149  ~/myapp.py
-'  240  63  ~/myapp.py
-'  250  2  ~/myapp.py
-'  97  32  ~/myapp.py
-'  94  65  ~/myapp.py
-'  93  28  ~/myapp.py

# History of marks within files (newest to oldest):

> ~/myapp.py
	"	156	1
	^	154	12
	.	154	11
	+	139	77
	+	140	97
	+	140	16
	+	140	99
	+	139	65
	+	142	10
	+	140	114
	+	142	18
	+	144	26
	+	157	22
	+	144	26
	+	141	2
	+	140	96
	+	157	6
	+	146	67
	+	147	52
	+	149	67
	+	150	57
	+	151	27
	+	156	12
	+	141	0
	+	205	0
	+	248	0
	+	151	5
	+	156	6
	+	151	24
	+	151	35
	+	151	54
	+	151	1
	+	151	26
	+	151	36
	+	151	26
	+	151	38
	+	151	26
	+	151	66
	+	151	24
	+	156	0
	+	151	35
	+	155	5
	+	129	0
	+	145	47
	+	129	0
	+	146	1
	+	147	1
	+	148	2
	+	149	3
	+	150	4
	+	155	5
	+	146	0
	+	247	12
	+	155	6
	+	151	0
	+	155	1
	+	151	13
	+	155	13
	+	136	43
	+	139	66
	+	139	92
	+	152	5
	+	151	44
	+	155	25
	+	139	79
	+	155	2
	+	152	45
	+	152	55
	+	140	0
	+	137	15
	+	152	57
	+	151	15
	+	152	6
	+	152	46
	+	151	6
	+	152	46
	+	138	9
	+	139	31
	+	152	46
	+	151	6
	+	152	46
	+	151	1
	+	152	57
	+	139	45
	+	152	46
	+	140	0
	+	153	12
	+	152	110
	+	153	14
	+	152	6
	+	153	17
	+	152	16
	+	153	18
	+	152	20
	+	153	22
	+	152	16
	+	153	1
	+	152	1
	+	151	1
	+	153	12
	+	151	2
	+	153	19
	+	154	11
	e	223	0

> ~/topology.xml
	"	340	7
	^	340	8
	.	340	0
	+	1778	0
	+	1569	0
	+	1306	0
	+	1032	0
	+	823	0
	+	549	0
	+	340	0

> ~/m
	"	1	0

> ~/path.py
	"	22	0
	^	22	0
	.	21	28
	+	13	44
	+	14	0
	+	13	31
	+	21	28

> ~/test.py
	"	1	0
	^	27	15
	.	27	14
	+	1	9
	+	13	0
	+	14	31
	+	16	20
	+	17	20
	+	22	26
	+	19	26
	+	20	24
	+	21	23
	+	22	23
	+	13	0
	+	12	17
	+	26	26
	+	23	44
	+	14	15
	+	15	7
	+	16	7
	+	17	7
	+	19	15
	+	20	14
	+	21	14
	+	22	14
	+	23	18
	+	24	14
	+	25	14
	+	26	14
	+	23	52
	+	24	32
	+	25	31
	+	26	50
	+	27	14

> ~/t
	"	1	0

> ~/to
	"	1	0

> ~/read.py
	"	3	35
	^	3	36
	.	3	35
	+	15	0
	+	4	30
	+	5	32
	+	6	0
	+	6	0
	+	7	15
	+	14	23
	+	8	22
	+	14	0
	+	8	6
	+	14	9
	+	8	8
	+	14	22
	+	12	30
	+	9	25
	+	14	2
	+	11	33
	+	12	31
	+	11	34
	+	11	50
	+	12	33
	+	13	33
	+	2	0
	+	5	0
	+	6	0
	+	9	9
	+	9	2
	+	11	2
	+	11	38
	+	12	4
	+	13	4
	+	9	2
	+	11	2
	+	11	37
	+	12	3
	+	13	4
	+	11	67
	+	10	19
	+	11	2
	+	12	0
	+	10	21
	+	11	0
	+	10	19
	+	3	35
	a	3	0
